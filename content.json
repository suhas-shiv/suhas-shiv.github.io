{"meta":{"title":"Suhas Blog","subtitle":null,"description":"My Experiments with Tech Blogs","author":"Suhas S","url":"http://suhasshiv.com"},"pages":[{"title":"About Suhas Shivaram","date":"2017-01-29T04:27:29.952Z","updated":"2017-01-29T04:27:29.952Z","comments":true,"path":"about/index.html","permalink":"http://suhasshiv.com/about/index.html","excerpt":"","text":"This is suhas"},{"title":"Categories","date":"2017-01-27T10:14:26.625Z","updated":"2017-01-27T10:14:26.625Z","comments":true,"path":"categories/index.html","permalink":"http://suhasshiv.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-01-28T05:24:53.329Z","updated":"2017-01-28T05:24:53.329Z","comments":true,"path":"tags/index.html","permalink":"http://suhasshiv.com/tags/index.html","excerpt":"","text":""},{"title":"Contact","date":"2017-02-10T13:38:52.287Z","updated":"2017-02-10T13:38:52.287Z","comments":true,"path":"contact/index.html","permalink":"http://suhasshiv.com/contact/index.html","excerpt":"","text":"Contact me for questions, comments, suggestions, or to request a topic for a post.Loading…"}],"posts":[{"title":"Introduction to GlassMapper","slug":"Glassmapper","date":"2017-02-12T04:19:37.761Z","updated":"2017-02-13T18:25:43.975Z","comments":true,"path":"2017/02/12/Glassmapper/","link":"","permalink":"http://suhasshiv.com/2017/02/12/Glassmapper/","excerpt":"What is an ORM?ORM stands for Object Relational Mapping. It is a technique that lets you map objects to relational databases and vice versa. Here, the term “object” mostly means an instance of a class. Tools that make use of ORM techniques are also referred to as ORM, which stands for Object Relational Mapper. There are many such tools available in .NET like Entity Framework, NHibernate, LinqToSQL, many more. Sitecore also has some of the ORM’s to map sitecore item data to models like GlassMapper, Synthesis, Fortis, etc. Of these available ORM’s Glassmapper is the most powerful and supported than the other ORM’s. Let’s take a deep dive into GlassMapper with the series on the Glassmapper posts.","text":"What is an ORM?ORM stands for Object Relational Mapping. It is a technique that lets you map objects to relational databases and vice versa. Here, the term “object” mostly means an instance of a class. Tools that make use of ORM techniques are also referred to as ORM, which stands for Object Relational Mapper. There are many such tools available in .NET like Entity Framework, NHibernate, LinqToSQL, many more. Sitecore also has some of the ORM’s to map sitecore item data to models like GlassMapper, Synthesis, Fortis, etc. Of these available ORM’s Glassmapper is the most powerful and supported than the other ORM’s. Let’s take a deep dive into GlassMapper with the series on the Glassmapper posts. What is GlassMapper?GlassMapper is a open source ORM for sitecore. GlassMapper can map data from Sitecore to Strongly typed models(POCO classes) in C#. GlassMapper framework allows you to map data on to C# classes and interfaces without any additional mark-up. As the data is mapped to your target objects it is converted to the target type. Why GlassMapper? Data Mapping - When an Item is mapped to a Object Model(POCO class mapping to a template), the item field values are mapped to the properties based on the property names. Data Conversion - Based on the field types, the data is converted. For Eg., if the field is a checkbox in sitecore, the data is converted to bool data type in the property. If the field is DateTime in sitecore, data is converted to DateTime property. All of this automatically, without any additional code written. Support Experience Editor - GlassMapper supports editable fields in the Experience Editor mode in MVC. Parent/Child Mapping - Glassmapper supports parent child Mapping allowing to access child items from the parent item. Inferred types are used to load any specific type of item using its template. TDS Class Code Generation - Glass Mapper helps in auto-generating the code for templates stored in TDS. TDS generates the models(Class/Interface) for templates.Installing Glass.Mapper.ScGlass.Mapper.Sc references can be installed into project directly from the Nuget Package Manager. Glass.Mapper.Sc needs the following assemblies to be referenced in your project which helps to determine which version of Glass.Mapper assemblies should be referenced. Sitecore.Kernel.dll System.Web.Mvc.dll Steps to installation Launch Visual Studio and open your sitecore solution. In the Tools menu, go to NuGet Package Manager and click on Manage NuGet Packages for Solution… In the NuGet manager, search for glass.mapper.sc and select your model and web project to install Glass.Mapper assemby references. Click on install. Following assemblies are added to your projects from the Nuget manager.References http://www.glass.lu/Mapper/Sc/Tutorials/Tutorial1","categories":[{"name":"Sitecore ORM","slug":"Sitecore-ORM","permalink":"http://suhasshiv.com/categories/Sitecore-ORM/"}],"tags":[{"name":"Glassmapper","slug":"Glassmapper","permalink":"http://suhasshiv.com/tags/Glassmapper/"},{"name":"Sitecore ORM","slug":"Sitecore-ORM","permalink":"http://suhasshiv.com/tags/Sitecore-ORM/"}]},{"title":"Solr Installation & setup","slug":"Solr-Setup","date":"2017-02-05T06:17:18.119Z","updated":"2017-02-05T17:22:32.688Z","comments":true,"path":"2017/02/05/Solr-Setup/","link":"","permalink":"http://suhasshiv.com/2017/02/05/Solr-Setup/","excerpt":"Sitecore supports Lucene and Solr search engines. While Lucene is provided out of the box with Sitecore; Solr needs installation, setup and configuration updates. This post provides detailed documentation on Solr installation and setup.","text":"Sitecore supports Lucene and Solr search engines. While Lucene is provided out of the box with Sitecore; Solr needs installation, setup and configuration updates. This post provides detailed documentation on Solr installation and setup. Softwares and versions used Sitecore : Version 8.1 Update 2 Solr: Version 5.4.1 JRE : Version 8u101 Steps to installation Download Solr-5.4.1.zip from the following linkhttp://archive.apache.org/dist/lucene/solr/5.4.1/ Create a folder “C:\\Solr” and Extract your zip file into “Solr” folder. Cut and paste the contents from the extracted folder “Solr-5.4.1” into “Solr” folder. Leave the extracted as it is for future reference to know the version of the Solr version. The Solr folder looks as seen below. Check for the jre installed on your machine, here – “C:\\Program Files\\Java”. If it is not installed, install from – http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html Upon installation/if already installed. Go to Computer-&gt; Properties -&gt; Advanced system settings-&gt; Environment Variables (“Advanced” tab) Click on Environment Variables and check for “JAVA_HOME” under the “System variables” Open command prompt as admin. Change the path to “C:Solr\\bin”. Now execute the following command to start the solr service on port- 8983.solr start -p 8983The following success message is seen after running the above command. Open your browser and type – “localhost:8983/solr” which shows up the Solr admin panel. Create a new core for the indexes. Separate core for every index. Execute the following command to create new core:solr create -c [core_name] -p 8983Eg: solr create -c sitecore_analytics_index -p 8983Note: At point if you run into any issue, please consider restarting/stopping/starting Solr by executing the following command:Restart cmd: solr restart -p 8983Stop cmd: solr stop -p 8983Start cmd: solr start -p 8983 Go back to your solr admin panel and verify the newly created core is showing up under the “Core Admin” menu. Go ahead and create the additional cores for web, master and core by repeating the step 8. The cores created above can now be found under the Solr folder that was created in step 2. Navigate to the following folder – “C:\\Solr\\server\\solr” where the folders matching the names of the above cores can be found. Login to your sitecore. Go to “Control Panel”. Click on “Generate the Solr Schema.xml file”. Update the Source file path to the “conf” folder under your core folder. Update as seen in the below images. Repeat the same for all the cores created. Under same “conf” folder, open the “solrconfig.xml” file and search for: “ClassicIndexSchemaFactory” and uncomment the whole line. (can be moved above the comment section which it is currently in) “ManagedIndexSchemaFactory” and comment the complete schemaFactory section. Comment out the complete node ““. Go to Solr admin panel and reload all the cores. Add Castle.Core v3.3.x and Castle.Windsor dll v3.1.0 reference in to the project. Add references to solr api’s which can be got from the following link. Scroll down to find “Solr support package” and download the zip.https://dev.sitecore.net/Downloads/Sitecore_Experience_Platform/Sitecore_81/Sitecore_Experience_Platform_81_Update2.aspx Extract the downloaded package and add the reference in the project to the following dll’s.NOTE: If setting up solr on the project, step 15 and 16 are to be done on the project and when compiled these files will be compiled into deploy location (using TDS).If setting up solr on the deploy location, the above dll’s mentioned in step 15 and 16 can be directly copied to bin folder under the deloy location. If setting up solr on the project, update the Global.asax.cs with the following code.123456789101112131415161718192021222324252627282930using Sitecore.ContentSearch.SolrProvider.CastleWindsorIntegration;using Sitecore.Diagnostics;namespace sample.com.Web&#123; public class Global : WindsorApplication &#123; public override void Application_Start() &#123; //ViewEngines.Engines.Add(new CustomViewEngine()); // Code that runs on application startup AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); RouteConfig.RegisterRoutes(RouteTable.Routes); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); //START: For Solr ONLY, comment out if for Lucene try &#123; base.Application_Start(); &#125; catch (Exception e) &#123; Log.Error(\"Unable to connect to SOLR\", e, this); &#125; //END: For Solr ONLY, comment out if for Lucene MvcHandler.DisableMvcResponseHeader = true; &#125; &#125;&#125; If setting up solr on the deploy location, update the Global.asax with following line.1&lt;%@Application Language=’C#’ Inherits=”Sitecore.ContentSearch.SolrProvider.CastleWindsorIntegration.WindsorApplication”%&gt;” 19. Disable all the lucene config files under the “App.config/include” folder by searching for lucene keyword. Update all the lucene config by appending the file name with “.disabled”. Enable the following solr config files under “App.config/include” by deleting the “.example” extension. Now you’re done with the complete Solr setup. Go to “Control Panel” in sitecore and click on “Indexing Manager”. Continue to index on the “Indexing Manager” window.Attaching schema.xml for reference.Schema xml References https://doc.sitecore.net/sitecore_experience_platform/81/setting_up_and_maintaining/search_and_indexing/walkthrough_setting_up_solr","categories":[{"name":"Sitecore Search","slug":"Sitecore-Search","permalink":"http://suhasshiv.com/categories/Sitecore-Search/"}],"tags":[{"name":"Solr","slug":"Solr","permalink":"http://suhasshiv.com/tags/Solr/"}]}]}