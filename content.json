{"meta":{"title":"Suhas Blog","subtitle":null,"description":"My Experiments with Tech Blogs","author":"Suhas S","url":"http://suhasshiv.com"},"pages":[{"title":"About Suhas Shivaram","date":"2017-02-18T08:21:50.326Z","updated":"2017-02-18T08:21:50.326Z","comments":true,"path":"about/index.html","permalink":"http://suhasshiv.com/about/index.html","excerpt":"","text":"I’m Suhas Shivaram."},{"title":"Categories","date":"2017-01-27T10:14:26.625Z","updated":"2017-01-27T10:14:26.625Z","comments":true,"path":"categories/index.html","permalink":"http://suhasshiv.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-01-28T05:24:53.329Z","updated":"2017-01-28T05:24:53.329Z","comments":true,"path":"tags/index.html","permalink":"http://suhasshiv.com/tags/index.html","excerpt":"","text":""},{"title":"Contact","date":"2017-02-10T13:38:52.287Z","updated":"2017-02-10T13:38:52.287Z","comments":true,"path":"contact/index.html","permalink":"http://suhasshiv.com/contact/index.html","excerpt":"","text":"Contact me for questions, comments, suggestions, or to request a topic for a post.Loading…"}],"posts":[{"title":"Sitecore Offline Campaign","slug":"Offline-Campaign","date":"2017-02-26T07:44:12.051Z","updated":"2017-02-26T07:56:01.900Z","comments":true,"path":"2017/02/26/Offline-Campaign/","link":"","permalink":"http://suhasshiv.com/2017/02/26/Offline-Campaign/","excerpt":"Sitecore Offline Campaign Offline Campaign are the campaigns which run off the Digital space such television, telecallers, billboard or radio commercials, etc. A memorable url is used for offline campaigns, which helps users to campaign pages without much off a fuss.","text":"Sitecore Offline Campaign Offline Campaign are the campaigns which run off the Digital space such television, telecallers, billboard or radio commercials, etc. A memorable url is used for offline campaigns, which helps users to campaign pages without much off a fuss. Creating Offline Campaign In my previous post we have seen how to create an online campaign. Creating offline campaign is same as online with its respective attributes defined. For the offline campaign, I have created a campaign under campaign category, Television –&gt; Channel(Nat Geo) –&gt; Program(Mega Structures) Once you are done creating a campaign, Save and Deploy the campaign. For the offline campaigns, the campaign link will not be used. A unique page will be linked to the offline campaign. Go to Content Editor, Create clone of the landing page item on which the you need the campaign to be configured. In my case, I have created clone of Jan Event landing page and renamed to Jan Event - Megastructure. Since this page is unique to the campaign and is being promoted from an offline channel, data on these pages can be updated to reflect that of the channel. In my example, I can use logo of Nat Geo and Megastructure Program which assures the users that they are redirected to the right page. To link the campaign to the page, Go to ANALYZE tab, click on Attributes. On the Campaign tab, select the campaign to be linked to the item. As mentioned earlier, we need a memorable url for the users. This can be done by going to PRESENTATION tab and clicking on Aliases and adding the alias for the page. You’re done with creating and managing Offline Campaign. Similar to online campaigns, offline campaigns can also be tracked in Sitecore Analytics. This is part-4 of the series on Sitecore Experience Marketing.Please feel free to drop your suggestions, questions, comments, or request a topic for a post on Contact page.","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"},{"name":"Sitecore Experience Marketing","slug":"Weekend-Walkthrough/Sitecore-Experience-Marketing","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/Sitecore-Experience-Marketing/"}],"tags":[{"name":"Campaign","slug":"Campaign","permalink":"http://suhasshiv.com/tags/Campaign/"}]},{"title":"Sitecore Online Campaign","slug":"Online-Campaign","date":"2017-02-25T11:39:06.463Z","updated":"2017-02-26T07:57:00.234Z","comments":true,"path":"2017/02/25/Online-Campaign/","link":"","permalink":"http://suhasshiv.com/2017/02/25/Online-Campaign/","excerpt":"Sitecore Online CampaignOnline Campaign are the campaigns which run on as advertisements on Digital space such as email, social media, blogs, paid search, etc.","text":"Sitecore Online CampaignOnline Campaign are the campaigns which run on as advertisements on Digital space such as email, social media, blogs, paid search, etc. Creating Online Campaign On the Sitecore dashboard, Click on Campaign Creator. Click on Create Campaign activity Enter the Campaign Name, Start Date, and End Date. Select the appropriate facets for the Campaign. Click on Save. Once you Save. Scroll to down to Campaign Link is generated. This Campaign link is the key to track all online campaign in Sitecore. Go back to Sitecore and click on Marketing Control Panel. Under Marketing Control Panel, Expand Campaigns to find your campaign which just created. Select the campaign which was just created. Here you can find additional fields. Type - Can put in some category which shows up in analytics Role Engagement Plan - Helps in Engagement automation Description - Description about the Campaign Traffic Type - Helps in deeper tracking in analytics Duration - Time frame the campaigns is defined to run Cost - Helps to track Visits, value per visit and also cost Now we’re done with creating and defining the Campaign The campaign link can shared with the campaign management team to attach the campaign link to the campaign url. Eg. myurl.com/account/registration/?sc_camp=660D7E16E6524B45BE4C290CA0194E54 So any user comes through the above link will be tracked throughout the site using the above campaign link. The tracking details can be viewed in the Experience Analytics. Go to Dashboard and click on Experience Analytics Here we can see Value per visit based on the Engagement value setup which help you evaluate the which are the more important campaigns based on the value. This is part-3 of the series on Sitecore Experience Marketing. In the next part we’ll explore on Sitecore Offline Campaign.Please feel free to drop your suggestions, questions, comments, or request a topic for a post on Contact page.","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"},{"name":"Sitecore Experience Marketing","slug":"Weekend-Walkthrough/Sitecore-Experience-Marketing","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/Sitecore-Experience-Marketing/"}],"tags":[{"name":"Campaign","slug":"Campaign","permalink":"http://suhasshiv.com/tags/Campaign/"}]},{"title":"Sitecore Taxonomy","slug":"Sitecore-Taxonomy","date":"2017-02-19T05:57:55.832Z","updated":"2017-02-26T07:56:47.683Z","comments":true,"path":"2017/02/19/Sitecore-Taxonomy/","link":"","permalink":"http://suhasshiv.com/2017/02/19/Sitecore-Taxonomy/","excerpt":"What is Taxonomy?Taxonomy is a categorized structure that can be used to identify and organize information in Sitecore. Taxonomy can be used to classify all of marketing activities such as campaigns, goals, and events. Taxonomy tags can be applied on these items.","text":"What is Taxonomy?Taxonomy is a categorized structure that can be used to identify and organize information in Sitecore. Taxonomy can be used to classify all of marketing activities such as campaigns, goals, and events. Taxonomy tags can be applied on these items. How Taxonomy helps? Taxonomy tracks website activity in more detail and get more information on how visitors are interacting with the content and the website implemented on Sitecore Experience Platform. Using Taxonomy, marketing strategy can be tweaked and improved overtime. Taxonomy tags help provide a consistent way to organize your marketing efforts while enabling you to use the experience analytics that measure traffic, engagement value, and value per visit, which helps drive reporting and drill down on a more granular level. Taxonomy tags can be used to create personalization rules to display different content to different people when they visit your site based on campaign groups, interaction venues or the channels a contact uses to visit your website. Basic TaxonomySitecore provides 4 basic marketing taxonomies: Channels Campaign groups Assets Venues Custom TaxonomyCustom marketing taxonomies can also be created based on the business needs. Custom taxonomies enable you to organize the locations, channels and different types of campaigns that you have, giving you more control over how you track and organize your campaign activities. Custom facets can be created using marketing taxonomies to describe aspects of goals, campaigns or assets. These facets can be used to identify marketing activities and also track how contacts interact with these activities. Creating Custom TaxonomySitecore provides a default Campaign, Goal and Assets Facets. These should be created with smaller degrees of details to the broader default group. Ex. Campaign group could be a newsletter, Campaign Facet could be specific like region, product type or season. Let’s start setting up some Facets. Login to Sitecore On the dashboard, Click on Marketing Control Panel. On the Marketing Control Panel, Expand the Taxonomy tree. Right click on Taxonomies and Insert a Custom Taxonomy. Create Campaign Region Taxonomy. Add Custom Group on the Campaign Region created. Further insert Custom taxonomy tag on the Campaign Region just created. Creating Campaign groups Right Click on the Campaign Group and Insert a Campaign Group. Assuming my company has monthly newsletter, I am creating a Newsletter Campaign Group. Once created you can add tracking Code which is recommended and ideally tracked in another business system. Also, add some description and image, it will help you navigate through the content. Now Save the item. Deploy the item by selecting Campaign Group and navigating to Taxonomy ribbon, so that it is available throughout Sitecore. Explore the Channel further down. You can find many of online and offline channels provided, which can be fine tuned. This is part-2 of the series on Sitecore Experience Marketing. In the next part we’ll explore on Sitecore Online Campaign.Please feel free to drop your suggestions, questions, comments, or request a topic for a post on Contact page. References:https://doc.sitecore.net/sitecore_experience_platform/developing/marketing_operations/marketing_taxonomies","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"},{"name":"Sitecore Experience Marketing","slug":"Weekend-Walkthrough/Sitecore-Experience-Marketing","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/Sitecore-Experience-Marketing/"}],"tags":[{"name":"Taxonomy","slug":"Taxonomy","permalink":"http://suhasshiv.com/tags/Taxonomy/"},{"name":"Channel","slug":"Channel","permalink":"http://suhasshiv.com/tags/Channel/"},{"name":"Campaign","slug":"Campaign","permalink":"http://suhasshiv.com/tags/Campaign/"}]},{"title":"Sitecore Campaign","slug":"Sitecore-Campaigns","date":"2017-02-18T13:52:39.061Z","updated":"2017-02-26T07:56:29.121Z","comments":true,"path":"2017/02/18/Sitecore-Campaigns/","link":"","permalink":"http://suhasshiv.com/2017/02/18/Sitecore-Campaigns/","excerpt":"What is a Campaign?A campaign is an organized effort by marketing teams designed to influence the decision making process within a specific group with the following objectives. To get more traffic to the site. To increase brand awareness To improve campaign effectiveness. At smaller levels campaigns can be tracked by revenue . Tracking advertising based on Return On Investment. Get contacts to perform certain actions on your website. Referrals Contributing to a sale can be tracked.","text":"What is a Campaign?A campaign is an organized effort by marketing teams designed to influence the decision making process within a specific group with the following objectives. To get more traffic to the site. To increase brand awareness To improve campaign effectiveness. At smaller levels campaigns can be tracked by revenue . Tracking advertising based on Return On Investment. Get contacts to perform certain actions on your website. Referrals Contributing to a sale can be tracked. Campaign ClassificationCampaign can be broadly classified into: Online Campaign - Online Campaign are the campaigns which run on as advertisements on Digital space such as email, social media, blogs, paid search, etc. Offline Campaign - Offline Campaign are the campaigns which run off the Digital space such television, telecallers, billboard or radio commercials, etc. This is part-1 of the series on Sitecore Experience Marketing. In the next part we’ll explore on Sitecore Taxonomy.Please feel free to drop your suggestions, questions, comments, or request a topic for a post on Contact page. References:https://doc.sitecore.net/sitecore_experience_platform/digital_marketing/campaigns/campaigns/campaigns","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"},{"name":"Sitecore Experience Marketing","slug":"Weekend-Walkthrough/Sitecore-Experience-Marketing","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/Sitecore-Experience-Marketing/"}],"tags":[{"name":"Campaign","slug":"Campaign","permalink":"http://suhasshiv.com/tags/Campaign/"}]},{"title":"Mapping list type to custom type in TDS code Generation","slug":"TDS-Glassmapper-CustomTypes","date":"2017-02-18T12:24:47.247Z","updated":"2017-02-18T12:31:09.479Z","comments":true,"path":"2017/02/18/TDS-Glassmapper-CustomTypes/","link":"","permalink":"http://suhasshiv.com/2017/02/18/TDS-Glassmapper-CustomTypes/","excerpt":"TDS is very powerful and efficient with many benefits that come along with the tool. Easy sharing of the items updates across the team Easy updating of the items Code Generation, classes that are comparable to sitecore items…these are to name a few.","text":"TDS is very powerful and efficient with many benefits that come along with the tool. Easy sharing of the items updates across the team Easy updating of the items Code Generation, classes that are comparable to sitecore items…these are to name a few. Code Generation is great, but how does it work with non-native types Thinking of code generation, it reduces a additional overhead of implementing POCO classes using GlassMapper. TDS generates the code for the sitecore items, templates and so on. When TDS generates classes for templates, basic fields like Single Line Text, Multi-Line Text, Rich Text are mapped to string type (which a native .net datatype). For fields like Image, TDS maps them to GlassMapper datatype of Image. What about the Multilist, Droplink, Droptree, Treelist. These are the fields, which have will referencing to Template items within sitecore most often? Let’s try exploring the problem and understanding solution by looking at a Scenario Scenario News Category template with the following fields News Category Title News template have the following fields. News item is associated to a News Category via droplink. News Title - Single Line Text Image - Image Description - Multi-Line Text News Category - DropLink - Datasource - News Category item News List have the following fields. News Listing contains the list of news items via Multilist. News List Title - Single Line Text News Listing - Multilist Let’s Sync TDS with sitecore and add newly created items to TDS projects. The TDSModel class is updated as well.News Category 1234567891011121314151617[SitecoreType(TemplateId=INews_CategoryConstants.TemplateIdString)] //, Cachable = true public partial class News_Category : GlassBase, INews_Category &#123; /// &lt;summary&gt; /// The Title field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Single-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: ea89d506-af2b-405f-922b-547f46b0c842&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INews_CategoryConstants.TitleFieldName)] public virtual string Title &#123;get; set;&#125; &#125; News Below we see the properties are generated for the sitecore template fields. Glass has casted single line and Multi-Line fields to string type, Image to Image type. But the Droplink is a field with custom Datasource, hence it is unable to map it to the custom type field. We’ll see the possible solutions in a short while.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 [SitecoreType(TemplateId=INewsConstants.TemplateIdString)] //, Cachable = truepublic partial class News : GlassBase, INews&#123; /// &lt;summary&gt; /// The Detail field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Multi-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: 7f288512-4c92-4375-9c8c-7d34af7af626&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.DetailFieldName)] public virtual string Detail &#123;get; set;&#125; /// &lt;summary&gt; /// The Image field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Image&lt;/para&gt; /// &lt;para&gt;Field ID: 14bc9e87-31b4-422a-8e70-071891b5a83a&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.ImageFieldName)] public virtual Image Image &#123;get; set;&#125; /// &lt;summary&gt; /// The News Category field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Droplink&lt;/para&gt; /// &lt;para&gt;Field ID: 999225be-7b18-40bf-a184-c7e010234966&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.News_CategoryFieldName)] public virtual Guid News_Category &#123;get; set;&#125; /// &lt;summary&gt; /// The Title field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Single-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: 554e22bd-97f7-4dfd-96ba-7f39adc74006&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.TitleFieldName)] public virtual string Title &#123;get; set;&#125;&#125; News List Glass has casted single line and Multi-Line fields to string type, Image to Image type. But the multilist is a field with custom Datasource pointing to News items, hence it is unable to map it to the custom type field. We’ll see the possible solutions in a short while.123456789101112131415161718192021222324252627 public partial class News_List : GlassBase, INews_List&#123; /// &lt;summary&gt; /// The News Listing field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Multilist&lt;/para&gt; /// &lt;para&gt;Field ID: 54db0411-de8b-4e51-b529-93af5929a395&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INews_ListConstants.News_ListingsFieldName)] public virtual IEnumerable&lt;Guid&gt; News_Listings &#123;get; set;&#125; /// &lt;summary&gt; /// The Title field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Single-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: d0237971-adf0-4eb0-990a-b3fbd457d9e4&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INews_ListConstants.TitleFieldName)] public virtual string Title &#123;get; set;&#125;&#125; SolutionsThere are 2 possible solutions. One is using TDS and second by extending Glassmapper class. Let’s take a look both of them. Solution 1 - Using TDS We can update properties of the field to change the type of the fields to type that is desired. As in the above scenario, on the News template the type of the property “News_Category” should be “News_Category”. This can be done by going to the property of the field “News_Category” in TDS and updating the Custom Data with “type=DMS.Models.INews_Category” (where DMS.Models is the namespace). Now regenerate the code on TDS project. The type of the News_Category is updated. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 [SitecoreType(TemplateId=INewsConstants.TemplateIdString)] //, Cachable = truepublic partial class News : GlassBase, INews&#123; /// &lt;summary&gt; /// The Detail field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Multi-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: 7f288512-4c92-4375-9c8c-7d34af7af626&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.DetailFieldName)] public virtual string Detail &#123;get; set;&#125; /// &lt;summary&gt; /// The Image field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Image&lt;/para&gt; /// &lt;para&gt;Field ID: 14bc9e87-31b4-422a-8e70-071891b5a83a&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.ImageFieldName)] public virtual Image Image &#123;get; set;&#125; /// &lt;summary&gt; /// The News Category field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Droplink&lt;/para&gt; /// &lt;para&gt;Field ID: 999225be-7b18-40bf-a184-c7e010234966&lt;/para&gt; /// &lt;para&gt;Custom Data: type=DMS.Models.INews_Category&lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.News_CategoryFieldName)] public virtual DMS.Models.INews_Category News_Category &#123;get; set;&#125; /// &lt;summary&gt; /// The Title field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Single-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: 554e22bd-97f7-4dfd-96ba-7f39adc74006&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INewsConstants.TitleFieldName)] public virtual string Title &#123;get; set;&#125;&#125; For updating the IEnumerable, go on the properties of the field on the TDS project. Update Custom Data with “generic=DMS.Models.INews” and Regenerate code. 12345678910111213141516171819202122232425262728 [SitecoreType(TemplateId=INews_ListConstants.TemplateIdString)] //, Cachable = truepublic partial class News_List : GlassBase, INews_List&#123; /// &lt;summary&gt; /// The News Listing field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Multilist&lt;/para&gt; /// &lt;para&gt;Field ID: 54db0411-de8b-4e51-b529-93af5929a395&lt;/para&gt; /// &lt;para&gt;Custom Data: generic=DMS.Models.INews&lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INews_ListConstants.News_ListingsFieldName)] public virtual IEnumerable&lt;DMS.Models.INews&gt; News_Listings &#123;get; set;&#125; /// &lt;summary&gt; /// The Title field. /// &lt;para&gt;&lt;/para&gt; /// &lt;para&gt;Field Type: Single-Line Text&lt;/para&gt; /// &lt;para&gt;Field ID: d0237971-adf0-4eb0-990a-b3fbd457d9e4&lt;/para&gt; /// &lt;para&gt;Custom Data: &lt;/para&gt; /// &lt;/summary&gt; [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Team Development for Sitecore - GlassItem.tt\", \"1.0\")] [SitecoreField(INews_ListConstants.TitleFieldName)] public virtual string Title &#123;get; set;&#125;&#125; Now you can directly use the TDS generated classes, without having to fetch the items based on item id. Solution 2 - Extending Glassmapper class In this solution, we will be extending the partial classes generated. For the News class, we have the News Category which is of Guid type. Extend the News class with a partial class and create a custom property and add the attribute to map it to. Make sure namespace is same as your TDSModel. 123456789using Glass.Mapper.Sc.Configuration.Attributes;namespace DMS.Models&#123; public partial class News &#123; [SitecoreField(INewsConstants.News_CategoryFieldName)] public virtual News_Category CustomNewsCategory &#123; get; set; &#125; &#125;&#125; For the News Listing class, we have the News which is of IEnumerable type. Extend the News_Listing class with a partial class and create a custom property and add the attribute to map it to. 1234567891011using System.Collections.Generic;using Glass.Mapper.Sc.Configuration.Attributes;namespace DMS.Models&#123; public partial class News_List &#123; [SitecoreField(INews_ListConstants.News_ListingsFieldName)] public virtual IEnumerable&lt;INews&gt; NewsList &#123; get; set; &#125; &#125;&#125; Now thinking of which is a better solution from the implementation perspective. First solution gives you easier approach to update the type right out of TDS. Second solution is gives you the flexibility to do operations on the properties. Also, for mapping the children items, second solution more feasible. So based on the implementation needed, you can follow either of the approaches which best suits your need. Please feel free to drop your suggestions, questions, comments, or request a topic for a post on Contact page.","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"}],"tags":[{"name":"Glassmapper","slug":"Glassmapper","permalink":"http://suhasshiv.com/tags/Glassmapper/"},{"name":"Sitecore ORM","slug":"Sitecore-ORM","permalink":"http://suhasshiv.com/tags/Sitecore-ORM/"},{"name":"TDS","slug":"TDS","permalink":"http://suhasshiv.com/tags/TDS/"}]},{"title":"Introduction to GlassMapper with Sitecore","slug":"Glassmapper","date":"2017-02-12T04:19:37.761Z","updated":"2017-02-18T12:17:36.929Z","comments":true,"path":"2017/02/12/Glassmapper/","link":"","permalink":"http://suhasshiv.com/2017/02/12/Glassmapper/","excerpt":"What is an ORM?ORM stands for Object Relational Mapping. It is a technique that lets you map objects to relational databases and vice versa. Here, the term “object” mostly means an instance of a class. Tools that make use of ORM techniques are also referred to as ORM, which stands for Object Relational Mapper. There are many such tools available in .NET like Entity Framework, NHibernate, LinqToSQL, many more. Sitecore also has some of the ORM’s to map sitecore item data to models like GlassMapper, Synthesis, Fortis, etc. Of these available ORM’s Glassmapper is the most powerful and supported than the other ORM’s. Let’s take a deep dive into GlassMapper with the series on the Glassmapper posts.","text":"What is an ORM?ORM stands for Object Relational Mapping. It is a technique that lets you map objects to relational databases and vice versa. Here, the term “object” mostly means an instance of a class. Tools that make use of ORM techniques are also referred to as ORM, which stands for Object Relational Mapper. There are many such tools available in .NET like Entity Framework, NHibernate, LinqToSQL, many more. Sitecore also has some of the ORM’s to map sitecore item data to models like GlassMapper, Synthesis, Fortis, etc. Of these available ORM’s Glassmapper is the most powerful and supported than the other ORM’s. Let’s take a deep dive into GlassMapper with the series on the Glassmapper posts. What is GlassMapper?GlassMapper is a open source ORM for sitecore. GlassMapper can map data from Sitecore to Strongly typed models(POCO classes) in C#. GlassMapper framework allows you to map data on to C# classes and interfaces without any additional mark-up. As the data is mapped to your target objects it is converted to the target type. Why GlassMapper? Data Mapping - When an Item is mapped to a Object Model(POCO class mapping to a template), the item field values are mapped to the properties based on the property names. Data Conversion - Based on the field types, the data is converted. For Eg., if the field is a checkbox in sitecore, the data is converted to bool data type in the property. If the field is DateTime in sitecore, data is converted to DateTime property. All of this automatically, without any additional code written. Support Experience Editor - GlassMapper supports editable fields in the Experience Editor mode in MVC. Parent/Child Mapping - Glassmapper supports parent child Mapping allowing to access child items from the parent item. Inferred types are used to load any specific type of item using its template. TDS Class Code Generation - Glass Mapper helps in auto-generating the code for templates stored in TDS. TDS generates the models(Class/Interface) for templates.Installing Glass.Mapper.ScGlass.Mapper.Sc references can be installed into project directly from the Nuget Package Manager. Glass.Mapper.Sc needs the following assemblies to be referenced in your project which helps to determine which version of Glass.Mapper assemblies should be referenced. Sitecore.Kernel.dll System.Web.Mvc.dllSteps to installation** Launch Visual Studio and open your sitecore solution. In the Tools menu, go to NuGet Package Manager and click on Manage NuGet Packages for Solution… In the NuGet manager, search for glass.mapper.sc and select your model and web project to install Glass.Mapper assemby references. Click on install. Following assemblies are added to your projects from the Nuget manager.References http://www.glass.lu/Mapper/Sc/Tutorials/Tutorial1","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"}],"tags":[{"name":"Glassmapper","slug":"Glassmapper","permalink":"http://suhasshiv.com/tags/Glassmapper/"},{"name":"Sitecore ORM","slug":"Sitecore-ORM","permalink":"http://suhasshiv.com/tags/Sitecore-ORM/"}]},{"title":"Setting up Solr with Sitecore","slug":"Solr-Setup","date":"2017-02-05T06:17:18.119Z","updated":"2017-02-18T12:17:24.250Z","comments":true,"path":"2017/02/05/Solr-Setup/","link":"","permalink":"http://suhasshiv.com/2017/02/05/Solr-Setup/","excerpt":"Sitecore supports Lucene and Solr search engines. While Lucene is provided out of the box with Sitecore; Solr needs installation, setup and configuration updates. This post provides detailed documentation on Solr installation and setup.","text":"Sitecore supports Lucene and Solr search engines. While Lucene is provided out of the box with Sitecore; Solr needs installation, setup and configuration updates. This post provides detailed documentation on Solr installation and setup. Softwares and versions used Sitecore : Version 8.1 Update 2 Solr: Version 5.4.1 JRE : Version 8u101 Steps to installation Download Solr-5.4.1.zip from the following linkhttp://archive.apache.org/dist/lucene/solr/5.4.1/ Create a folder “C:\\Solr” and Extract your zip file into “Solr” folder. Cut and paste the contents from the extracted folder “Solr-5.4.1” into “Solr” folder. Leave the extracted as it is for future reference to know the version of the Solr version. The Solr folder looks as seen below. Check for the jre installed on your machine, here – “C:\\Program Files\\Java”. If it is not installed, install from – http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html Upon installation/if already installed. Go to Computer-&gt; Properties -&gt; Advanced system settings-&gt; Environment Variables (“Advanced” tab) Click on Environment Variables and check for “JAVA_HOME” under the “System variables” Open command prompt as admin. Change the path to “C:Solr\\bin”. Now execute the following command to start the solr service on port- 8983.solr start -p 8983The following success message is seen after running the above command. Open your browser and type – “localhost:8983/solr” which shows up the Solr admin panel. Create a new core for the indexes. Separate core for every index. Execute the following command to create new core:solr create -c [core_name] -p 8983Eg: solr create -c sitecore_analytics_index -p 8983Note: At point if you run into any issue, please consider restarting/stopping/starting Solr by executing the following command:Restart cmd: solr restart -p 8983Stop cmd: solr stop -p 8983Start cmd: solr start -p 8983 Go back to your solr admin panel and verify the newly created core is showing up under the “Core Admin” menu. Go ahead and create the additional cores for web, master and core by repeating the step 8. The cores created above can now be found under the Solr folder that was created in step 2. Navigate to the following folder – “C:\\Solr\\server\\solr” where the folders matching the names of the above cores can be found. Login to your sitecore. Go to “Control Panel”. Click on “Generate the Solr Schema.xml file”. Update the Source file path to the “conf” folder under your core folder. Update as seen in the below images. Repeat the same for all the cores created. Under same “conf” folder, open the “solrconfig.xml” file and search for: “ClassicIndexSchemaFactory” and uncomment the whole line. (can be moved above the comment section which it is currently in) “ManagedIndexSchemaFactory” and comment the complete schemaFactory section. Comment out the complete node ““. Go to Solr admin panel and reload all the cores. Add Castle.Core v3.3.x and Castle.Windsor dll v3.1.0 reference in to the project. Add references to solr api’s which can be got from the following link. Scroll down to find “Solr support package” and download the zip.https://dev.sitecore.net/Downloads/Sitecore_Experience_Platform/Sitecore_81/Sitecore_Experience_Platform_81_Update2.aspx Extract the downloaded package and add the reference in the project to the following dll’s.NOTE: If setting up solr on the project, step 15 and 16 are to be done on the project and when compiled these files will be compiled into deploy location (using TDS).If setting up solr on the deploy location, the above dll’s mentioned in step 15 and 16 can be directly copied to bin folder under the deloy location. If setting up solr on the project, update the Global.asax.cs with the following code.123456789101112131415161718192021222324252627282930using Sitecore.ContentSearch.SolrProvider.CastleWindsorIntegration;using Sitecore.Diagnostics;namespace sample.com.Web&#123; public class Global : WindsorApplication &#123; public override void Application_Start() &#123; //ViewEngines.Engines.Add(new CustomViewEngine()); // Code that runs on application startup AreaRegistration.RegisterAllAreas(); GlobalConfiguration.Configure(WebApiConfig.Register); RouteConfig.RegisterRoutes(RouteTable.Routes); FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); //START: For Solr ONLY, comment out if for Lucene try &#123; base.Application_Start(); &#125; catch (Exception e) &#123; Log.Error(\"Unable to connect to SOLR\", e, this); &#125; //END: For Solr ONLY, comment out if for Lucene MvcHandler.DisableMvcResponseHeader = true; &#125; &#125;&#125; If setting up solr on the deploy location, update the Global.asax with following line.1&lt;%@Application Language=’C#’ Inherits=”Sitecore.ContentSearch.SolrProvider.CastleWindsorIntegration.WindsorApplication”%&gt;” 19. Disable all the lucene config files under the “App.config/include” folder by searching for lucene keyword. Update all the lucene config by appending the file name with “.disabled”. Enable the following solr config files under “App.config/include” by deleting the “.example” extension. Now you’re done with the complete Solr setup. Go to “Control Panel” in sitecore and click on “Indexing Manager”. Continue to index on the “Indexing Manager” window.Attaching schema.xml for reference.Schema xml References https://doc.sitecore.net/sitecore_experience_platform/81/setting_up_and_maintaining/search_and_indexing/walkthrough_setting_up_solr","categories":[{"name":"Weekend Walkthrough","slug":"Weekend-Walkthrough","permalink":"http://suhasshiv.com/categories/Weekend-Walkthrough/"}],"tags":[{"name":"Solr","slug":"Solr","permalink":"http://suhasshiv.com/tags/Solr/"},{"name":"Sitecore Search","slug":"Sitecore-Search","permalink":"http://suhasshiv.com/tags/Sitecore-Search/"}]}]}